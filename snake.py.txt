import turtle as t
STARTING_POSITION=[(0,0),(-20,0),(-40,0)]
MOVE_DISTANCE=20
UP=90
DOWN=270
LEFT=180
RIGHT=0

class Snake:
    def __init__(self) -> None:
        super().__init__()
        self.lst=[]
        self.create_turtle()
        self.head=self.lst[0]
    
    def create_turtle(self):
        for i in STARTING_POSITION:
            self.add_segment(i)
    
    def add_segment(self,i):
        new_turt=t.Turtle("square")
        new_turt.color("white")
        new_turt.penup()
        new_turt.goto(i)
        self.lst.append(new_turt)
        
    def extend(self):
        self.add_segment(self.lst[-1].position())
        
    def move(self):
        for seg_num in range(len(self.lst)-1,0,-1):
            new_x=self.lst[seg_num-1].xcor()
            new_y=self.lst[seg_num-1].ycor()
            self.lst[seg_num].goto(new_x,new_y)
        self.lst[0].forward(MOVE_DISTANCE)
        
    def up(self):
        if self.head.heading()!=DOWN:
            self.head.setheading(UP)
        
        
        #OWNN CODE
        # x_cor=self.lst[0].xcor()
        # y_cor=self.lst[1].xcor()
        # if x_cor==y_cor:
        #     pass
        # else:
        #     if self.lst[0].xcor()>self.lst[len(self.lst)-1].xcor():
        #         self.lst[0].left(90)
        #     else:
        #         self.lst[0].right(90)
    def down(self):
        if self.head.heading()!=UP:
            self.head.setheading(DOWN)
        # x_cor=self.lst[0].xcor()
        # y_cor=self.lst[1].xcor()
        # if x_cor==y_cor:
        #     pass
        # else:
        #     if self.lst[0].xcor()>self.lst[len(self.lst)-1].xcor():
        #         self.lst[0].right(90)
        #     else:
        #         self.lst[0].left(90)
    def right(self):
        if self.head.heading()!=LEFT:
            self.head.setheading(RIGHT)
        # x_cor=self.lst[0].ycor()
        # y_cor=self.lst[1].ycor()
        # if x_cor==y_cor:
        #     pass
        # else:
        #     if self.lst[0].ycor()>self.lst[len(self.lst)-1].ycor():
        #         self.lst[0].right(90)
        #     else:
        #         self.lst[0].left(90)
    def left(self):
        if self.head.heading()!=RIGHT:
            self.head.setheading(LEFT)
        # x_cor=self.lst[0].ycor()
        # y_cor=self.lst[1].ycor()
        # if x_cor==y_cor:
        #     pass
        # else:
        #     if self.lst[0].ycor()>self.lst[len(self.lst)-1].ycor():
        #         self.lst[0].left(90)
        #     else:
        #         self.lst[0].right(90)
    